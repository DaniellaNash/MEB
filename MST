//
#include<malloc.h>
#include<stdio.h>
#include<conio.h>

#define MAX_TX_DISTANCE 999
#define MAX_ARRAY_SIZE 10

int get_num_nodes(void);
void display (int display, int min_energy);

int get_num_nodes(void)
{
    int num_nodes;
    printf("\nEnter the number of nodes:");
    scanf("%d",&num_nodes);
    return num_nodes;
}

void display (int display, int min_energy)
{
    if(display ==0)
        printf("\n\n\n\n\n\nWelcome: Minimum Spanning Tree\n"); // Print introduction
    else
        printf("\n Minimun Energy found  %d",min_energy);
}

int main()
{
    int x,y,i,j,n;
    int visited [400]={0};//set all nodes to not visited
    int distance[400][400];//nodes
    int min_energy=0,energy=999;
    int num_nodes,num_edges=1;

    display(0,0);
    num_nodes = get_num_nodes();

    //ask for the distance needed of each edge the node takes and store them
    printf("\nEnter the network topology matrix:\n");
    for(i=1; i<=num_nodes; i++)
        for(j=1; j<=num_nodes; j++)
        {
            scanf("%d",&distance[i][j]);
            if(distance[i][j]==0)
                distance[i][j]=MAX_TX_DISTANCE;//set non-existing edges to a large number (infinity) to prevent being selected
        }
    visited[1]=1;//starting node

    while(num_edges < num_nodes)//for each edge of MST (MST number of edges should = number of nodes -1)
    {
        for(i=1, energy =999; i<=num_nodes; i++)//for each node to node edge
            for(j=1; j<=num_nodes; j++)
                if(distance[i][j]< energy)//check if the energy is not exceeding tx range i.e. edge exists
                    if(visited[i]!=0)            //and if the node is visited
                    {
                        energy = distance[i][j];  //then select that edge and compute the energy
                        x=i;
                        y=j;
                    }
        if(visited[x]==0 || visited[y]==0)//if either one of the node is not visited
        {
            min_energy += energy;// find highest energy of each node (not including its previous) and sum them for the total power
            visited[y]=1; //mark both nodes of the edge as visited

            for(n=1; n<=num_nodes; n++)
                if(n!=y)
                    if(distance[x][n]<= energy)// node can reach all other nodes with equal or lower tx power
                    {
                        visited[n]=1;
                        printf("\n Edge %d:(%d %d) energy:%d",num_edges++,x,n,energy); //then
                    }
            printf("\n Edge %d:(%d %d) energy:%d",num_edges++,x,y,energy); //then
        }
        distance[x][y]=distance[y][x]=MAX_TX_DISTANCE;//make sure this edge is not selected again
        distance[x][n]=distance[n][x]=MAX_TX_DISTANCE;//make sure this edge is not selected again
    }

    display(1,min_energy);
    return 0;
}
